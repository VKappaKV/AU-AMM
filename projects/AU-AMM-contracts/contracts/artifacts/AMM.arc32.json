{
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "bootstrap(pay,uint64,uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mint(axfer,axfer,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burn(axfer,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "swap(axfer,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createBidderEscrow(pay)address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bid(uint64,uint64,uint64,uint64,axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setManager(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setNewFee(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "default_manager": {
          "type": "bytes",
          "key": "default_manager"
        },
        "assetA": {
          "type": "uint64",
          "key": "asset_a"
        },
        "assetB": {
          "type": "uint64",
          "key": "asset_b"
        },
        "poolToken": {
          "type": "uint64",
          "key": "pool_token"
        },
        "ratio": {
          "type": "uint64",
          "key": "ratio"
        },
        "currentFee": {
          "type": "uint64",
          "key": "current_fee"
        },
        "maxFee": {
          "type": "uint64",
          "key": "max_fee"
        },
        "poolManager": {
          "type": "bytes",
          "key": "pool_manager"
        },
        "auctionState": {
          "type": "bytes",
          "key": "auction_state"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 6
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "AMM",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "bootstrap",
        "args": [
          {
            "name": "seed",
            "type": "pay"
          },
          {
            "name": "aAsset",
            "type": "uint64"
          },
          {
            "name": "bAsset",
            "type": "uint64"
          },
          {
            "name": "maxFee",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "mint",
        "args": [
          {
            "name": "aXfer",
            "type": "axfer"
          },
          {
            "name": "bXfer",
            "type": "axfer"
          },
          {
            "name": "poolAsset",
            "type": "uint64"
          },
          {
            "name": "aAsset",
            "type": "uint64"
          },
          {
            "name": "bAsset",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "burn",
        "args": [
          {
            "name": "poolXfer",
            "type": "axfer"
          },
          {
            "name": "poolAsset",
            "type": "uint64"
          },
          {
            "name": "aAsset",
            "type": "uint64"
          },
          {
            "name": "bAsset",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "swap",
        "args": [
          {
            "name": "swapXfer",
            "type": "axfer"
          },
          {
            "name": "aAsset",
            "type": "uint64"
          },
          {
            "name": "bAsset",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createBidderEscrow",
        "args": [
          {
            "name": "payMBR",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "bid",
        "args": [
          {
            "name": "lpAsset",
            "type": "uint64"
          },
          {
            "name": "rounds",
            "type": "uint64"
          },
          {
            "name": "bid",
            "type": "uint64"
          },
          {
            "name": "start",
            "type": "uint64"
          },
          {
            "name": "depositTxn",
            "type": "axfer"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setManager",
        "args": [
          {
            "name": "manager",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setNewFee",
        "args": [
          {
            "name": "currentFee",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}