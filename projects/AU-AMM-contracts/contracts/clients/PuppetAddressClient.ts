/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"PuppetAddress","desc":"","methods":[{"name":"new","desc":"Create a new account, rekeying it to the caller application address","args":[],"returns":{"type":"address","desc":"New account address"},"actions":{"create":["DeleteApplication"],"call":[]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":0,"ints":0},"local":{"bytes":0,"ints":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts\\puppetAddress.algo.ts:3","pc":[0]},{"teal":2,"source":"contracts\\puppetAddress.algo.ts:3","pc":[1,2,3,4]},{"teal":14,"source":"contracts\\puppetAddress.algo.ts:3","pc":[5,6]},{"teal":15,"source":"contracts\\puppetAddress.algo.ts:3","pc":[7]},{"teal":16,"source":"contracts\\puppetAddress.algo.ts:3","pc":[8,9]},{"teal":17,"source":"contracts\\puppetAddress.algo.ts:3","pc":[10]},{"teal":18,"source":"contracts\\puppetAddress.algo.ts:3","pc":[11,12]},{"teal":19,"source":"contracts\\puppetAddress.algo.ts:3","pc":[13]},{"teal":20,"source":"contracts\\puppetAddress.algo.ts:3","pc":[14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39]},{"teal":24,"source":"contracts\\puppetAddress.algo.ts:3","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[40]},{"teal":29,"source":"contracts\\puppetAddress.algo.ts:8","pc":[41,42,43,44,45,46]},{"teal":32,"source":"contracts\\puppetAddress.algo.ts:8","pc":[47,48,49]},{"teal":33,"source":"contracts\\puppetAddress.algo.ts:8","pc":[50]},{"teal":34,"source":"contracts\\puppetAddress.algo.ts:8","pc":[51]},{"teal":35,"source":"contracts\\puppetAddress.algo.ts:8","pc":[52]},{"teal":36,"source":"contracts\\puppetAddress.algo.ts:8","pc":[53]},{"teal":43,"source":"contracts\\puppetAddress.algo.ts:8","pc":[54,55,56]},{"teal":51,"source":"contracts\\puppetAddress.algo.ts:10","pc":[57]},{"teal":52,"source":"contracts\\puppetAddress.algo.ts:10","pc":[58]},{"teal":53,"source":"contracts\\puppetAddress.algo.ts:10","pc":[59,60]},{"teal":57,"source":"contracts\\puppetAddress.algo.ts:11","pc":[61,62]},{"teal":58,"source":"contracts\\puppetAddress.algo.ts:11","pc":[63,64]},{"teal":62,"source":"contracts\\puppetAddress.algo.ts:12","pc":[65]},{"teal":63,"source":"contracts\\puppetAddress.algo.ts:12","pc":[66,67]},{"teal":67,"source":"contracts\\puppetAddress.algo.ts:13","pc":[68,69]},{"teal":68,"source":"contracts\\puppetAddress.algo.ts:13","pc":[70,71]},{"teal":71,"source":"contracts\\puppetAddress.algo.ts:10","pc":[72]},{"teal":72,"source":"contracts\\puppetAddress.algo.ts:10","pc":[73,74]},{"teal":75,"source":"contracts\\puppetAddress.algo.ts:10","pc":[75]},{"teal":79,"source":"contracts\\puppetAddress.algo.ts:16","pc":[76,77]},{"teal":80,"source":"contracts\\puppetAddress.algo.ts:8","pc":[78]},{"teal":83,"source":"contracts\\puppetAddress.algo.ts:3","pc":[79,80,81,82,83,84]},{"teal":84,"source":"contracts\\puppetAddress.algo.ts:3","pc":[85,86,87]},{"teal":85,"source":"contracts\\puppetAddress.algo.ts:3","pc":[88,89,90,91]},{"teal":88,"source":"contracts\\puppetAddress.algo.ts:3","errorMessage":"this contract does not implement the given ABI method for create DeleteApplication","pc":[92]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAwIDEKCi8vIFRoaXMgVEVBTCB3YXMgZ2VuZXJhdGVkIGJ5IFRFQUxTY3JpcHQgdjAuMTA2LjIKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhlIGNvbnRyYWN0LCBpdHMgcmVzcGVjdGl2ZSBicmFuY2ggd2lsbCBiZSAiKk5PVF9JTVBMRU1FTlRFRCIgd2hpY2gganVzdCBjb250YWlucyAiZXJyIgp0eG4gQXBwbGljYXRpb25JRAohCnB1c2hpbnQgNgoqCnR4biBPbkNvbXBsZXRpb24KKwpzd2l0Y2ggKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpjcmVhdGVfRGVsZXRlQXBwbGljYXRpb24KCipOT1RfSU1QTEVNRU5URUQ6CgkvLyBUaGUgcmVxdWVzdGVkIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhpcyBjb250cmFjdC4gQXJlIHlvdSB1c2luZyB0aGUgY29ycmVjdCBPbkNvbXBsZXRlPyBEaWQgeW91IHNldCB5b3VyIGFwcCBJRD8KCWVycgoKLy8gbmV3KClhZGRyZXNzCiphYmlfcm91dGVfbmV3OgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglwdXNoYnl0ZXMgMHgxNTFmN2M3NQoKCS8vIGV4ZWN1dGUgbmV3KClhZGRyZXNzCgljYWxsc3ViIG5ldwoJY29uY2F0Cglsb2cKCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIG5ldygpOiBBZGRyZXNzCi8vCi8vIENyZWF0ZSBhIG5ldyBhY2NvdW50LCByZWtleWluZyBpdCB0byB0aGUgY2FsbGVyIGFwcGxpY2F0aW9uIGFkZHJlc3MKLy8gQHJldHVybnMgTmV3IGFjY291bnQgYWRkcmVzcwpuZXc6Cglwcm90byAwIDEKCgkvLyBjb250cmFjdHNccHVwcGV0QWRkcmVzcy5hbGdvLnRzOjEwCgkvLyBzZW5kUGF5bWVudCh7CgkvLyAgICAgICByZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgIGFtb3VudDogMCwKCS8vICAgICAgIHJla2V5VG86IGdsb2JhbHMuY2FsbGVyQXBwbGljYXRpb25BZGRyZXNzLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDEgLy8gIHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xwdXBwZXRBZGRyZXNzLmFsZ28udHM6MTEKCS8vIHJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIGNvbnRyYWN0c1xwdXBwZXRBZGRyZXNzLmFsZ28udHM6MTIKCS8vIGFtb3VudDogMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gY29udHJhY3RzXHB1cHBldEFkZHJlc3MuYWxnby50czoxMwoJLy8gcmVrZXlUbzogZ2xvYmFscy5jYWxsZXJBcHBsaWNhdGlvbkFkZHJlc3MKCWdsb2JhbCBDYWxsZXJBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgUmVrZXlUbwoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBjb250cmFjdHNccHVwcGV0QWRkcmVzcy5hbGdvLnRzOjE2CgkvLyByZXR1cm4gdGhpcy5hcHAuYWRkcmVzczsKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglyZXRzdWIKCipjcmVhdGVfRGVsZXRlQXBwbGljYXRpb246CglwdXNoYnl0ZXMgMHg1NjFkMmZlYSAvLyBtZXRob2QgIm5ldygpYWRkcmVzcyIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfbmV3CgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNyZWF0ZSBEZWxldGVBcHBsaWNhdGlvbgoJZXJy","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiACAAExGBSBBgsxGQiNDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJwCABBUffHWIAARQsCNDigABsSOyEDIKsgcisggyDrIgIrIBszIKiYAEVh0v6jYaAI4B/80A","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":1,"commitHash":"63d271cf"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the PuppetAddress contract
 */
export type PuppetAddressArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'new()address': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'new()address': []
  }
}

/**
 * The return type for each method
 */
export type PuppetAddressReturns = {
  'new()address': string
}

/**
 * Defines the types of available calls and state of the PuppetAddress smart contract.
 */
export type PuppetAddressTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'new()address' | 'new', {
      argsObj: PuppetAddressArgs['obj']['new()address']
      argsTuple: PuppetAddressArgs['tuple']['new()address']
      /**
       * New account address
       */
      returns: PuppetAddressReturns['new()address']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type PuppetAddressSignatures = keyof PuppetAddressTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type PuppetAddressNonVoidMethodSignatures = keyof PuppetAddressTypes['methods'] extends infer T ? T extends keyof PuppetAddressTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the PuppetAddress smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends PuppetAddressSignatures> = PuppetAddressTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the PuppetAddress smart contract to the method's return type
 */
export type MethodReturn<TSignature extends PuppetAddressSignatures> = PuppetAddressTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type PuppetAddressCreateCallParams =
  | Expand<CallParams<PuppetAddressArgs['obj']['new()address'] | PuppetAddressArgs['tuple']['new()address']> & {method: 'new'} & {onComplete: OnApplicationComplete.DeleteApplicationOC} & CreateSchema>
  | Expand<CallParams<PuppetAddressArgs['obj']['new()address'] | PuppetAddressArgs['tuple']['new()address']> & {method: 'new()address'} & {onComplete: OnApplicationComplete.DeleteApplicationOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type PuppetAddressDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: PuppetAddressCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the PuppetAddress smart contract
 */
export abstract class PuppetAddressParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends PuppetAddressCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'new':
          case 'new()address':
            return PuppetAddressParamsFactory.create.new(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the PuppetAddress smart contract using the new()address ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      new(params: CallParams<PuppetAddressArgs['obj']['new()address'] | PuppetAddressArgs['tuple']['new()address']> & AppClientCompilationParams & {onComplete: OnApplicationComplete.DeleteApplicationOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete: OnApplicationComplete.DeleteApplicationOC} {
        return {
          ...params,
          method: 'new()address' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

}

/**
 * A factory to create and deploy one or more instance of the PuppetAddress smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class PuppetAddressFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `PuppetAddressFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new PuppetAddressClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new PuppetAddressClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the PuppetAddress smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: PuppetAddressDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? PuppetAddressParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (PuppetAddressCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new PuppetAddressClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PuppetAddress smart contract using the new()address ABI method.
       *
       * Create a new account, rekeying it to the caller application address
       *
       * @param params The params for the smart contract call
       * @returns The create params: New account address
       */
      new: (params: CallParams<PuppetAddressArgs['obj']['new()address'] | PuppetAddressArgs['tuple']['new()address']> & AppClientCompilationParams & CreateSchema & {onComplete: OnApplicationComplete.DeleteApplicationOC}) => {
        return this.appFactory.params.create(PuppetAddressParamsFactory.create.new(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PuppetAddress smart contract using the new()address ABI method.
       *
       * Create a new account, rekeying it to the caller application address
       *
       * @param params The params for the smart contract call
       * @returns The create transaction: New account address
       */
      new: (params: CallParams<PuppetAddressArgs['obj']['new()address'] | PuppetAddressArgs['tuple']['new()address']> & AppClientCompilationParams & CreateSchema & {onComplete: OnApplicationComplete.DeleteApplicationOC}) => {
        return this.appFactory.createTransaction.create(PuppetAddressParamsFactory.create.new(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PuppetAddress smart contract using an ABI method call using the new()address ABI method.
       *
       * Create a new account, rekeying it to the caller application address
       *
       * @param params The params for the smart contract call
       * @returns The create result: New account address
       */
      new: async (params: CallParams<PuppetAddressArgs['obj']['new()address'] | PuppetAddressArgs['tuple']['new()address']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete: OnApplicationComplete.DeleteApplicationOC}) => {
        const result = await this.appFactory.send.create(PuppetAddressParamsFactory.create.new(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | PuppetAddressReturns['new()address']) }, appClient: new PuppetAddressClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the PuppetAddress smart contract
 */
export class PuppetAddressClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `PuppetAddressClient`
   *
   * @param appClient An `AppClient` instance which has been created with the PuppetAddress app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `PuppetAddressClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends PuppetAddressNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `PuppetAddressClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<PuppetAddressClient> {
    return new PuppetAddressClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `PuppetAddressClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<PuppetAddressClient> {
    return new PuppetAddressClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the PuppetAddress smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the PuppetAddress smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the PuppetAddress smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new PuppetAddressClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current PuppetAddress app
   */
  state = {
  }

  public newGroup(): PuppetAddressComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a clear state call to the PuppetAddress contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as PuppetAddressComposer
  }
}
export type PuppetAddressComposer<TReturns extends [...any[]] = []> = {
  /**
   * Makes a clear_state call to an existing instance of the PuppetAddress smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): PuppetAddressComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): PuppetAddressComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<PuppetAddressComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<PuppetAddressComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<PuppetAddressComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<PuppetAddressComposerResults<TReturns>>
}
export type PuppetAddressComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

